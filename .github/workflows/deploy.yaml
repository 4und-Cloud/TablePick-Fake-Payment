name: Deploy Spring Applications (Backend & Fake PG) to EC2 with ECR

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      # --- 1. 백엔드/결제 서버 코드 체크아웃 ---
      - name: Checkout Backend/Payment Code
        uses: actions/checkout@v4
        with:
          path: payment-service

      # --- 2. Fake PG 서버 코드 체크아웃 ---
      - name: Checkout Fake PG Code
        uses: actions/checkout@v4
        with:
          repository: 4und-Cloud/TablePick-Fake-Pg
          # Private Repository인 경우, 토큰이 필요합니다.
          # token: ${{ secrets.GH_PAT_FOR_FAKE_PG }}
          path: fake-pg-service

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      # --- 백엔드/결제 서버 application-secret.yml 생성 ---
      - name: Make application-secret.yml (Backend)
        # working-directory를 backend-service로 설정
        run: |
          mkdir -p src/main/resources # 이미 cd된 상태에서 상대경로
          echo "${{ secrets.YML }}" > src/main/resources/application-secret.yml
        shell: bash
        working-directory: ./payment-service # <--- 여기 추가!

      # --- 백엔드/결제 서버 Gradle 권한 및 빌드 ---
      - name: Grant execute permission for gradlew (Backend)
        run: chmod +x ./gradlew # working-directory가 설정되었으므로 ./gradlew로 변경
        working-directory: ./payment-service # <--- 여기 추가!

      - name: Build with Gradle (Backend)
        run: ./gradlew clean build -x test # working-directory가 설정되었으므로 ./gradlew로 변경
        working-directory: ./payment-service # <--- 여기 추가!

      # --- Fake PG 서버 Gradle 권한 및 빌드 ---
      - name: Grant execute permission for gradlew (Fake PG)
        run: chmod +x ./gradlew # working-directory가 설정되었으므로 ./gradlew로 변경
        working-directory: ./fake-pg-service # <--- 여기 추가!

      - name: Build with Gradle (Fake PG)
        run: ./gradlew clean build -x test # working-directory가 설정되었으므로 ./gradlew로 변경
        working-directory: ./fake-pg-service # <--- 여기 추가!

      # --- AWS 및 ECR 설정 ---
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # --- 백엔드/결제 서버 Docker 빌드 & ECR 푸시 ---
      - name: Build, tag, and push Backend/Payment image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: latest
        run: |
          docker build \
            --build-arg DEPENDENCY=payment-service/build/dependency \
            -f ./payment-service/Dockerfile \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            --platform linux/amd64 ./payment-service
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          # working-directory: ./payment-service # 이 스텝에서는 제거하는게 좋습니다.
      # 경로를 명시했기 때문에.

      # --- Fake PG 서버 Docker 빌드 & ECR 푸시 ---
      - name: Build, tag, and push Fake PG image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY_FAKE_PG: ${{ secrets.ECR_REPOSITORY_FAKE_PG_NAME }}
          IMAGE_TAG: latest
        run: |
          docker build \
            -f ./fake-pg-service/Dockerfile \
            -t $ECR_REGISTRY/$ECR_REPOSITORY_FAKE_PG:$IMAGE_TAG \
            --platform linux/amd64 ./fake-pg-service
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_FAKE_PG:$IMAGE_TAG
        # working-directory: ./fake-pg-service # 이 스텝에서는 제거하는게 좋습니다.

      # --- EC2 배포 스텝 ---
      - name: Deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          port: 22
          script: |
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | sudo docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}

            # --- 백엔드/결제 서버 컨테이너 배포 ---
            echo "Deploying Backend/Payment Server..."
            sudo docker pull ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY_NAME }}:latest
            if [ "$(sudo docker ps -a -q -f name=tablepick-payments-new)" ]; then
              sudo docker stop tablepick-payments-new
              sudo docker rm -f tablepick-payments-new
            fi
            sudo docker run -d \
              --name tablepick-app-new \
              -p 8080:8080 \
              -e DB_HOST="${{ secrets.DB_HOST }}" \
              -e DB_USER="${{ secrets.DB_USER }}" \
              -e DB_PASSWORD="${{ secrets.DB_PASSWORD }}" \
              -e KAFKA_HOST="${{ secrets.KAFKA_HOST }}" \
              ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY_NAME }}:latest
            
            # --- Fake PG 서버 컨테이너 배포 ---
            echo "Deploying Fake PG Server..."
            sudo docker pull ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY_FAKE_PG_NAME }}:latest
            if [ "$(sudo docker ps -a -q -f name=fake-pg-app-new)" ]; then
              sudo docker stop fake-pg-app-new
              sudo docker rm -f fake-pg-app-new
            fi
            sudo docker run -d \
              --name fake-pg-app-new \
              -p 8083:8083 \
              ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY_FAKE_PG_NAME }}:latest

            echo "Deployment complete."